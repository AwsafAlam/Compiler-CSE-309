  New ScopeTable with id 1 created

At line no: 1 type_specifier:INT

int  

At line no: 1 type_specifier:INT

int  

At line no: 1 parameter_list : type_specifier ID

int a 

  New ScopeTable with id 2 created

At line no: 2 factor : CONST_INT

2 

At line no: 2 unary_expression : factor

2 

At line no: 2 term :	unary_expression

2 

At line no: 2 variable : ID

a

At line no: 2 factor	: variable

a 

At line no: 2 unary_expression : factor

a 

At line no: 2 term :	term MULOP unary_expression

2*a 

At line no: 2 simple_expression : term

2*a 

At line no: 2 rel_expression	: simple_expression

2*a 

At line no: 2 logic_expression : rel_expression

2*a 

At line no: 2 expression : logic_expression

2*a 

At line no: 2 statement : RETURN expression SEMICOLON

return 2*a;
 

At line no: 2 statements : statement 

return 2*a;
 

At line no: 3 compound_statement : LCURL statements RCURL

{
return 2*a;

} 

ScopeTable # 2
----------------------
14 -->  <a : ID> 

ScopeTable # 1
----------------------
19 -->  <f : ID> 

ScopeTable with id 2 removed

At line no: 3 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a){
return 2*a;

} 

At line no: 3 unit : func_definition

int f(int a){
return 2*a;

} 

At line no: 3 program : | unit

int f(int a){
return 2*a;

}

At line no: 5 type_specifier:INT

int  

At line no: 5 type_specifier:INT

int  

At line no: 5 parameter_list : type_specifier ID

int a 

At line no: 5 type_specifier:INT

int  

At line no: 5 parameter_list  : parameter_list COMMA type_specifier ID

int a,int b 

  New ScopeTable with id 3 created

At line no: 6 type_specifier:INT

int  

At line no: 6 declaration_list : ID

x

At line no: 6 var_declaration : type_specifier declaration_list SEMICOLON

int x;


At line no: 6 statement : var_declaration

int x;
 

At line no: 6 statements : statement 

int x;
 

At line no: 7 variable : ID

x

At line no: 7 variable : ID

a

At line no: 7 factor	: variable

a 

At line no: 7 unary_expression : factor

a 

At line no: 7 term :	unary_expression

a 

At line no: 7 simple_expression : term

a 

At line no: 7 rel_expression	: simple_expression

a 

At line no: 7 logic_expression : rel_expression

a 

At line no: 7 arguments : logic_expression

a 

At line no: 7 argument_list : arguments

a 

At line no: 7 factor	: ID LPAREN argument_list RPAREN

f(a) 

At line no: 7 unary_expression : factor

f(a) 

At line no: 7 term :	unary_expression

f(a) 

At line no: 7 simple_expression : term

f(a) 

At line no: 7 variable : ID

a

At line no: 7 factor	: variable

a 

At line no: 7 unary_expression : factor

a 

At line no: 7 term :	unary_expression

a 

At line no: 7 simple_expression : simple_expression ADDOP term

f(a)+a 

At line no: 7 variable : ID

b

At line no: 7 factor	: variable

b 

At line no: 7 unary_expression : factor

b 

At line no: 7 term :	unary_expression

b 

At line no: 7 simple_expression : simple_expression ADDOP term

f(a)+a+b 

At line no: 7 rel_expression	: simple_expression

f(a)+a+b 

At line no: 7 logic_expression : rel_expression

f(a)+a+b 

At line no: 7 expression : variable ASSIGNOP logic_expression

x=f(a)+a+b 

At line no: 7 expression_statement 	: expression SEMICOLON

x=f(a)+a+b;
 

At line no: 7 statement : expression_statement

x=f(a)+a+b;
 

At line no: 7 statements :| statements statement 

int x;
x=f(a)+a+b;
 

At line no: 8 variable : ID

x

At line no: 8 factor	: variable

x 

At line no: 8 unary_expression : factor

x 

At line no: 8 term :	unary_expression

x 

At line no: 8 simple_expression : term

x 

At line no: 8 rel_expression	: simple_expression

x 

At line no: 8 logic_expression : rel_expression

x 

At line no: 8 expression : logic_expression

x 

At line no: 8 statement : RETURN expression SEMICOLON

return x;
 

At line no: 8 statements :| statements statement 

int x;
x=f(a)+a+b;
return x;
 

At line no: 9 compound_statement : LCURL statements RCURL

{
int x;
x=f(a)+a+b;
return x;

} 

ScopeTable # 3
----------------------
7 -->  <x : ID> 
14 -->  <a : ID> 
15 -->  <b : ID> 

ScopeTable # 1
----------------------
19 -->  <f : ID> 
20 -->  <g : ID> 

ScopeTable with id 3 removed

At line no: 9 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;

} 

At line no: 9 unit : func_definition

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;

} 

At line no: 9 program : program unit

int f(int a){
return 2*a;

}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;

} 

At line no: 11 type_specifier:INT

int  

  New ScopeTable with id 4 created

At line no: 12 type_specifier:INT

int  

At line no: 12 declaration_list : ID

a

At line no: 12 declaration_list : declaration_list COMMA ID

a,b

At line no: 12 var_declaration : type_specifier declaration_list SEMICOLON

int a,b;


At line no: 12 statement : var_declaration

int a,b;
 

At line no: 12 statements : statement 

int a,b;
 

At line no: 13 type_specifier:INT

int  

At line no: 13 declaration_list : ID LTHIRD CONST_INT RTHIRD

c[3] 

At line no: 13 var_declaration : type_specifier declaration_list SEMICOLON

int c[3];


At line no: 13 statement : var_declaration

int c[3];
 

At line no: 13 statements :| statements statement 

int a,b;
int c[3];
 

At line no: 14 variable : ID

a

At line no: 14 factor : CONST_INT

1 

At line no: 14 unary_expression : factor

1 

At line no: 14 term :	unary_expression

1 

At line no: 14 simple_expression : term

1 

At line no: 14 rel_expression	: simple_expression

1 

At line no: 14 logic_expression : rel_expression

1 

At line no: 14 expression : variable ASSIGNOP logic_expression

a=1 

At line no: 14 expression_statement 	: expression SEMICOLON

a=1;
 

At line no: 14 statement : expression_statement

a=1;
 

At line no: 14 statements :| statements statement 

int a,b;
int c[3];
a=1;
 

At line no: 15 factor : CONST_INT

2 

At line no: 15 unary_expression : factor

2 

At line no: 15 term :	unary_expression

2 

At line no: 15 simple_expression : term

2 

At line no: 15 rel_expression	: simple_expression

2 

At line no: 15 logic_expression : rel_expression

2 

At line no: 15 expression : logic_expression

2 

At line no: 15 variable : ID LTHIRD expression RTHIRD

c[2] 

At line no: 15 factor : CONST_INT

2 

At line no: 15 unary_expression : factor

2 

At line no: 15 term :	unary_expression

2 

At line no: 15 simple_expression : term

2 

At line no: 15 rel_expression	: simple_expression

2 

At line no: 15 logic_expression : rel_expression

2 

At line no: 15 expression : variable ASSIGNOP logic_expression

c[2]=2 

At line no: 15 expression_statement 	: expression SEMICOLON

c[2]=2;
 

At line no: 15 statement : expression_statement

c[2]=2;
 

At line no: 15 statements :| statements statement 

int a,b;
int c[3];
a=1;
c[2]=2;
 

At line no: 16 variable : ID

a

At line no: 16 factor : CONST_INT

2 

At line no: 16 unary_expression : factor

2 

At line no: 16 term :	unary_expression

2 

At line no: 16 simple_expression : term

2 

At line no: 16 rel_expression	: simple_expression

2 

At line no: 16 logic_expression : rel_expression

2 

At line no: 16 expression : logic_expression

2 

At line no: 16 variable : ID LTHIRD expression RTHIRD

c[2] 

At line no: 16 factor	: variable

c[2] 

At line no: 16 unary_expression : factor

c[2] 

At line no: 16 term :	unary_expression

c[2] 

At line no: 16 simple_expression : term

c[2] 

At line no: 16 rel_expression	: simple_expression

c[2] 

At line no: 16 logic_expression : rel_expression

c[2] 

At line no: 16 arguments : logic_expression

c[2] 

At line no: 16 argument_list : arguments

c[2] 

At line no: 16 factor	: ID LPAREN argument_list RPAREN

f(c[2]) 

At line no: 16 unary_expression : factor

f(c[2]) 

At line no: 16 term :	unary_expression

f(c[2]) 

At line no: 16 simple_expression : term

f(c[2]) 

At line no: 16 rel_expression	: simple_expression

f(c[2]) 

At line no: 16 logic_expression : rel_expression

f(c[2]) 

At line no: 16 expression : variable ASSIGNOP logic_expression

a=f(c[2]) 

At line no: 16 expression_statement 	: expression SEMICOLON

a=f(c[2]);
 

At line no: 16 statement : expression_statement

a=f(c[2]);
 

At line no: 16 statements :| statements statement 

int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
 

At line no: 17 variable : ID

a

At line no: 17 factor	: variable

a 

At line no: 17 unary_expression : factor

a 

At line no: 17 term :	unary_expression

a 

At line no: 17 simple_expression : term

a 

At line no: 17 rel_expression	: simple_expression

a 

At line no: 17 logic_expression : rel_expression

a 

At line no: 17 arguments : logic_expression

a 

At line no: 17 factor : CONST_INT

3 

At line no: 17 unary_expression : factor

3 

At line no: 17 term :	unary_expression

3 

At line no: 17 simple_expression : term

3 

At line no: 17 rel_expression	: simple_expression

3 

At line no: 17 logic_expression : rel_expression

3 

At line no: 17 arguments : arguments COMMA logic_expression

a,3 

At line no: 17 argument_list : arguments

a,3 

At line no: 17 factor	: ID LPAREN argument_list RPAREN

g(a,3) 

At line no: 17 unary_expression : factor

g(a,3) 

At line no: 17 term :	unary_expression

g(a,3) 

At line no: 17 simple_expression : term

g(a,3) 

At line no: 17 rel_expression	: simple_expression

g(a,3) 

At line no: 17 logic_expression : rel_expression

g(a,3) 

At line no: 17 expression : logic_expression

g(a,3) 

At line no: 17 expression_statement 	: expression SEMICOLON

g(a,3);
 

At line no: 17 statement : expression_statement

g(a,3);
 

At line no: 17 statements :| statements statement 

int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
 

At line no: 18 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);
 

At line no: 18 statements :| statements statement 

int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
 

At line no: 19 factor : CONST_INT

0 

At line no: 19 unary_expression : factor

0 

At line no: 19 term :	unary_expression

0 

At line no: 19 simple_expression : term

0 

At line no: 19 rel_expression	: simple_expression

0 

At line no: 19 logic_expression : rel_expression

0 

At line no: 19 expression : logic_expression

0 

At line no: 19 statement : RETURN expression SEMICOLON

return 0;
 

At line no: 19 statements :| statements statement 

int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;
 

At line no: 20 compound_statement : LCURL statements RCURL

{
int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;

} 

ScopeTable # 4
----------------------
14 -->  <a : ID> 
15 -->  <b : ID> 
16 -->  <c : ID> 

ScopeTable # 1
----------------------
8 -->  <main : ID> 
19 -->  <f : ID> 
20 -->  <g : ID> 

ScopeTable with id 4 removed

At line no: 20 func_definition : type_specifier ID LPAREN  RPAREN compound_statement

int main(){
int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;

} 

At line no: 20 unit : func_definition

int main(){
int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;

} 

At line no: 20 program : program unit

int f(int a){
return 2*a;

}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;

}
int main(){
int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;

} 

At line no: 21 start : program

int f(int a){
return 2*a;

}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;

}
int main(){
int a,b;
int c[3];
a=1;
c[2]=2;
a=f(c[2]);
g(a,3);
println(a);
return 0;

}

