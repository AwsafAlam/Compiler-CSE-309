  New ScopeTable with id 1 created

At line no: 1 type_specifier:INT

int  

  New ScopeTable with id 2 created

At line no: 2 type_specifier:INT

int  

At line no: 2 declaration_list : ID

a

At line no: 2 declaration_list : declaration_list COMMA ID

a,b

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

int a,b;


At line no: 2 statement : var_declaration

int a,b;
 

At line no: 2 statements : statement 

int a,b;
 

At line no: 3 type_specifier:INT

int  

At line no: 3 declaration_list : ID LTHIRD CONST_INT RTHIRD

c[3] 

At line no: 3 var_declaration : type_specifier declaration_list SEMICOLON

int c[3];


At line no: 3 statement : var_declaration

int c[3];
 

At line no: 3 statements :| statements statement 

int a,b;
int c[3];
 

At line no: 4 variable : ID

a

At line no: 4 factor : CONST_INT

1 

At line no: 4 unary_expression : factor

1 

At line no: 4 term :	unary_expression

1 

At line no: 4 simple_expression : term

1 

At line no: 4 rel_expression	: simple_expression

1 

At line no: 4 logic_expression : rel_expression

1 

At line no: 4 expression : variable ASSIGNOP logic_expression

a=1 

At line no: 4 expression_statement 	: expression SEMICOLON

a=1;
 

At line no: 4 statement : expression_statement

a=1;
 

At line no: 4 statements :| statements statement 

int a,b;
int c[3];
a=1;
 

At line no: 5 variable : ID

a

At line no: 5 factor	: variable

a 

At line no: 5 unary_expression : factor

a 

At line no: 5 term :	unary_expression

a 

At line no: 5 simple_expression : term

a 

At line no: 5 factor : CONST_INT

1 

At line no: 5 unary_expression : factor

1 

At line no: 5 term :	unary_expression

1 

At line no: 5 simple_expression : term

1 

At line no: 5 rel_expression	: simple_expression RELOP simple_expression

a>1 

At line no: 5 logic_expression : rel_expression

a>1 

At line no: 5 expression : logic_expression

a>1 

  New ScopeTable with id 3 created

At line no: 6 factor : CONST_INT

2 

At line no: 6 unary_expression : factor

2 

At line no: 6 term :	unary_expression

2 

At line no: 6 simple_expression : term

2 

At line no: 6 rel_expression	: simple_expression

2 

At line no: 6 logic_expression : rel_expression

2 

At line no: 6 expression : logic_expression

2 

At line no: 6 variable : ID LTHIRD expression RTHIRD

c[2] 

At line no: 6 factor : CONST_INT

2 

At line no: 6 unary_expression : factor

2 

At line no: 6 term :	unary_expression

2 

At line no: 6 simple_expression : term

2 

At line no: 6 rel_expression	: simple_expression

2 

At line no: 6 logic_expression : rel_expression

2 

At line no: 6 expression : variable ASSIGNOP logic_expression

c[2]=2 

At line no: 6 expression_statement 	: expression SEMICOLON

c[2]=2;
 

At line no: 6 statement : expression_statement

c[2]=2;
 

At line no: 6 statements : statement 

c[2]=2;
 

At line no: 7 compound_statement : LCURL statements RCURL

{
c[2]=2;

} 

ScopeTable # 3
----------------------

ScopeTable # 2
----------------------
14 -->  <a : ID> 
15 -->  <b : ID> 
16 -->  <c : ID> 

ScopeTable # 1
----------------------
8 -->  <main : ID> 

ScopeTable with id 3 removed

At line no: 7 statement : compound_statement

{
c[2]=2;

} 

At line no: 9 statement : IF LPAREN expression RPAREN statement

if(a>1){
c[2]=2;

} 

At line no: 9 statements :| statements statement 

int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

} 

At line no: 9 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);
 

At line no: 9 statements :| statements statement 

int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
 

At line no: 10 factor : CONST_INT

0 

At line no: 10 unary_expression : factor

0 

At line no: 10 term :	unary_expression

0 

At line no: 10 simple_expression : term

0 

At line no: 10 rel_expression	: simple_expression

0 

At line no: 10 logic_expression : rel_expression

0 

At line no: 10 expression : logic_expression

0 

At line no: 10 statement : RETURN expression SEMICOLON

return 0;
 

At line no: 10 statements :| statements statement 

int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;
 

At line no: 11 compound_statement : LCURL statements RCURL

{
int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;

} 

ScopeTable # 2
----------------------
14 -->  <a : ID> 
15 -->  <b : ID> 
16 -->  <c : ID> 

ScopeTable # 1
----------------------
8 -->  <main : ID> 

ScopeTable with id 3 removed

At line no: 11 func_definition : type_specifier ID LPAREN  RPAREN compound_statement

int main(){
int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;

} 

At line no: 11 unit : func_definition

int main(){
int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;

} 

At line no: 11 program : | unit

int main(){
int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;

}

At line no: 12 start : program

int main(){
int a,b;
int c[3];
a=1;
if(a>1){
c[2]=2;

}println(a);
return 0;

}

